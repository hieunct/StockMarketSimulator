[{"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js":"1","/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js":"2","/Users/hieun/github/StockMarketSimulator/frontend/src/App.js":"3","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx":"4","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx":"5","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx":"6","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx":"7","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx":"8","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx":"9","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx":"10","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx":"11","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx":"12"},{"size":502,"mtime":1682561727247,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1682561727247,"results":"15","hashOfConfig":"14"},{"size":244,"mtime":1682561727245,"results":"16","hashOfConfig":"14"},{"size":12303,"mtime":1682561727246,"results":"17","hashOfConfig":"14"},{"size":9935,"mtime":1682561727246,"results":"18","hashOfConfig":"14"},{"size":4242,"mtime":1682630036111,"results":"19","hashOfConfig":"14"},{"size":1630,"mtime":1682561727246,"results":"20","hashOfConfig":"14"},{"size":1623,"mtime":1682561727246,"results":"21","hashOfConfig":"14"},{"size":3169,"mtime":1682561727246,"results":"22","hashOfConfig":"14"},{"size":4415,"mtime":1682628657115,"results":"23","hashOfConfig":"14"},{"size":2201,"mtime":1682561727246,"results":"24","hashOfConfig":"14"},{"size":362,"mtime":1682561727246,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1rzx0sv",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js",[],["57","58"],"/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/App.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx",["59","60","61","62"],"import { useState, useEffect, useRef } from 'react';\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport StockDisplay from './StockDisplay';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport BuyInputForm from './BuyInputForm';\nimport SellInputForm from './SellInputForm';\nimport DepositForm from './DepositForm';\nimport WithdrawalForm from './WithdrawalForm';\nimport axios from 'axios';\nimport { Typography } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport Investing from './Investing';\nimport Chart from './Chart';\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"flex\"\n    },\n    table: {\n        minWidth: 700,\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid'\n    },\n    stockDisplay: {\n        width: 600,\n        marginRight: 30,\n    },\n    lineDisplay: {\n        marginBottom: 100,\n    },\n    inputAndTable: {\n        display: \"flex\",\n        justifyContent: 'center',\n        marginTop: 50,\n        flexDirection: \"row\"\n    },\n    investing: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    paperColor: {\n        backgroundColor: \"#424242\"\n    },\n    deposit: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: theme.spacing(4)\n    },\n    depositMargin: {\n        marginRight: theme.spacing(2)\n    },\n    chartGrid: {\n        width: \"100%\",\n        height: \"400px\"\n    }\n}));\n\nexport const TransactionContext = React.createContext();\nexport const StockPriceContext = React.createContext();\nexport const DepositContext = React.createContext();\n\nconst useIsMount = () => {\n    const isMountRef = useRef(true);\n    useEffect(() => {\n        isMountRef.current = false;\n    }, []);\n    return isMountRef.current;\n};\nconst Layout = () => {\n    const classes = useStyles();\n    const [transaction, setTransaction] = useState({});\n    const [currentPrice, setCurrentPrice] = useState({});\n    const [deposit, setDeposit] = useState(0);\n    const [buyPower, setBuyPower] = useState(0);\n    const [history, setHistory] = useState({});\n    const prevDeposit = useRef();\n    function createTransaction(shares, price, total, current) {\n        return { shares, price, total, current };\n    }\n    const handleModifyingStock = (data) => {\n        setTransaction(transaction => {\n            if (data[\"Shares\"] === 0) {\n                delete transaction[data[\"Stock Name\"]];\n                return { ...transaction }\n            }\n            return { ...transaction, [data[\"Stock Name\"]]: createTransaction(data[\"Shares\"], data[\"Price\"], data[\"Total\"], 0) }\n        })\n\n        setCurrentPrice(currentPrice => {\n            return { ...currentPrice, [data[\"Stock Name\"]]: data[\"Price\"] }\n        })\n    }\n\n    async function handleDepositChange(data) {\n        const sendDeposit = async () => {\n            const sendData = {\n                \"amount\": parseFloat(deposit) + parseFloat(data[\"amount\"]),\n                \"date\": Date.now(),\n            }\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}addDeposit`, sendData)\n        }\n        await sendDeposit();\n        setDeposit(deposit => {\n            return parseFloat(deposit) + parseFloat(data[\"amount\"])\n        })\n    }\n\n    async function handleBuyPowerChange(data) {\n        const sendBuyPower = async () => {\n            const sendData = {\n                \"amount\": parseFloat(buyPower) + parseFloat(data[\"amount\"]),\n                \"date\": Date.now(),\n            }\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}buyPower`, sendData);\n        }\n        await sendBuyPower();\n        setBuyPower(parseFloat(buyPower) + parseFloat(data[\"amount\"]));\n    }\n\n    async function handleBuyAndSell(data) {\n        const sendBuyPower = async () => {\n            const sendData = {\n                \"amount\": parseFloat(data[\"amount\"]),\n                \"date\": Date.now(),\n            }\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}buyPower`, sendData)\n        }\n        await sendBuyPower();\n        setBuyPower(data[\"amount\"])\n    }\n\n    async function handleModifyingHistory(data) {\n        setHistory(history => {\n            const stock = data['stock'];\n            if (history[stock] !== undefined) {\n                history[stock].push(data);\n            }\n            else {\n                const hist = []\n                hist.push(data)\n                history = {...history, [stock]: hist}\n            }\n            return history;\n        })\n    }\n\n    const [chartData, setChartData] = useState({});\n    const handleModifyingChartData = async (data) => {\n        setChartData(data);\n    }\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}allTransactions`)\n            if (Object.keys(response.data).length !== 0) {\n                let stockMap = {}\n                response.data.forEach((stock, i) => {\n                    const names = stock[\"Stock Name\"]\n                    stockMap = { ...stockMap, [names]: createTransaction(stock[\"Shares\"], stock[\"Price\"], stock[\"Total\"], 0) }\n                })\n                setTransaction(stockMap);\n            }\n            else {\n                setTransaction({})\n            }\n        }\n        const fetchData2 = async () => {\n            let day = new Date();\n            const backend = await axios.get(`${process.env.REACT_APP_BACKEND_URL}allStockPrice`)\n            console.log(backend)\n            \n            if (day.getDay() !== 0 && day.getDay() !== 6 && !day.getHours() <= 3 && !day.getHours >= 21) {\n                setCurrentPrice(backend.data);\n            }\n            else {\n                let stockName = Object.keys(backend.data);\n                const API_KEY = process.env.REACT_APP_API_KEY;\n                for (let i = 0; i < stockName.length; i++) {\n                    const response = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${stockName[i].toUpperCase()}&token=${API_KEY}`);\n                    const price = response.data[\"c\"].toString()\n                    setCurrentPrice(currentPrice => {\n                        return { ...currentPrice, [stockName[i]]: price }\n                    })\n                }\n            }\n        }\n        fetchData();\n        fetchData2();\n    }, [])\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}mostRecentDeposit`)\n            if (response.data.length !== 0) {\n                setDeposit(response.data[0].amount);\n            }\n        }\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}mostRecentBuyPower`)\n            if (response.data.length !== 0) {\n                setBuyPower(response.data[0].amount);\n            }\n        }\n        fetchData()\n    }, [])\n\n    useEffect(() => {\n        // const socket = io.connect(\"http://localhost:8080\");\n        // socket.on(\"change-type\", async (data) => {\n        //     const [key, value] = Object.entries(data)[0]\n        //     setCurrentPrice((currentPrice) => {\n        //         return { ...currentPrice, [key]: value }\n        //     })\n        // })\n        const API_KEY = process.env.REACT_APP_API_KEY;\n        const socket2 = new WebSocket(`wss://ws.finnhub.io?token=${API_KEY}`);\n\n        // Connection opened -> Subscribe\n        socket2.addEventListener('open', function (event) {\n            const list = Object.keys(transaction)\n            for (var i = 0; i < list.length; i++) {\n                socket2.send(JSON.stringify({ 'type': 'subscribe', 'symbol': list[i] }))\n            }\n        });\n\n        // Listen for messages\n        socket2.addEventListener('message', function (event) {\n            const data = JSON.parse(event.data).data\n            if (data !== undefined) {\n                setCurrentPrice(currentPrice => {\n                    const price = data[0][\"p\"].toString()\n                    const name = data[0][\"s\"]\n                    return { ...currentPrice, [name]: price }\n                })\n            }\n        });\n    }, [transaction])\n\n    useEffect(() => {\n        const sendDeposit = async () => {\n            const data = {\n                \"amount\": deposit,\n                \"date\": Date.now(),\n            }\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}deposit`, data)\n        }\n        if (deposit === 0 && localStorage.getItem(deposit) === 0) {\n            sendDeposit();\n        }\n    }, [deposit])\n\n    useEffect(() => {\n        localStorage.setItem(\"deposit\", deposit);\n    }, [prevDeposit.current])\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}allTradeHistory`);\n            if (Object.keys(response.data.data).length !== 0) {\n                setHistory(response.data.data);\n            }\n        }\n        fetchData();\n    }, [])\n\n    \n    return (\n        <React.Fragment>\n            <Grid className={classes.container} alignItems=\"center\" container>\n                <StockPriceContext.Provider value={{ currentPrice }}>\n                    <TransactionContext.Provider value={{ transaction, history, handleModifyingStock, handleModifyingHistory }}>\n                        <DepositContext.Provider value={{ deposit, buyPower, handleDepositChange, handleBuyAndSell, handleBuyPowerChange }}>\n                            <Grid className={classes.investing} alignItems=\"center\" container>\n                                <Investing modifyChartData={handleModifyingChartData}>\n                                </Investing>\n                            </Grid>\n                            <Grid className={classes.chartGrid}>\n                                <Chart chartData = {chartData}>\n\n                                </Chart>\n                            </Grid>\n                            <Grid className={classes.inputAndTable}>\n                                <Grid className={classes.stockDisplay} >\n                                    <StockDisplay >\n                                    </StockDisplay>\n                                </Grid>\n                                <Grid>\n                                    <Typography variant=\"h4\" align=\"left\" color=\"primary\">\n                                        Buy Stock\n                                    </Typography>\n                                    <BuyInputForm >\n                                    </BuyInputForm>\n                                    <Typography variant=\"h4\" align=\"left\" color=\"primary\">\n                                        Sell Stock\n                                    </Typography>\n                                    <SellInputForm >\n                                    </SellInputForm>\n                                    <div className={classes.deposit}>\n                                        <div className={classes.depositMargin}>\n                                            <Typography variant=\"h4\" align=\"left\" color=\"primary\">\n                                                Deposit\n                                                </Typography>\n                                            <DepositForm >\n                                            </DepositForm>\n                                        </div>\n                                        <div>\n                                            <Typography variant=\"h4\" align=\"left\" color=\"primary\">\n                                                Withdraw\n                                                </Typography>\n                                            <WithdrawalForm>\n                                            </WithdrawalForm>\n                                        </div>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        </DepositContext.Provider>\n                    </TransactionContext.Provider>\n                </StockPriceContext.Provider>\n            </Grid>\n        </React.Fragment >\n    );\n}\nexport default Layout;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx",["63","64","65","66","67"],"import React, { useState, useEffect, useContext } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TransactionContext, StockPriceContext } from './Layout';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.common.black,\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\n\n\nfunction createTransaction(shares, price, total, current) {\n    return { shares, price, total, current };\n}\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: \"50%\"\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst Row = (props) => {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell className={classes.tableRightBorder}>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                    {row.name}\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.shares}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.equity}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.totalReturn}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.currentRowPrice}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                History\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Date</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Shares</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Price</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Total</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        !!props.history ? (props.history).map((stock) => {\n                                            return <TableRow key={stock[\"_id\"]}>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                                                    {stock[\"date\"]}\n                                                </TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"shares\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"price\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">\n                                                    {stock[\"total\"]}\n                                                </TableCell>\n                                            </TableRow>\n                                        }\n                                        ) : null\n                                    }\n\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        shares: PropTypes.number.isRequired,\n        equity: PropTypes.number,\n\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                total: PropTypes.number,\n                shares: PropTypes.string,\n                date: PropTypes.string,\n            }),\n        ),\n        totalReturn: PropTypes.number,\n        currentPrice: PropTypes.number,\n    }),\n};\nconst StockDisplay = (props) => {\n    const classes = useStyles();\n    const transactions = useContext(TransactionContext).transaction;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n    const history = useContext(TransactionContext).history;\n\n    return (\n        <TableContainer border={1} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\"></StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Stock Name</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Shares</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Equity</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Total Return</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Current Price</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(transactions).reduce((result, row) => {\n                        let currentRowPrice = updatedPrice[row] === undefined ? '0' : updatedPrice[row].toString()\n                        let shares = '0';\n                        let equity = '0';\n                        let totalReturn = '0'\n                        shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\n                        if (shares !== undefined && currentRowPrice !== undefined) {\n                            equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\n                        }\n                        totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\n                        let data = {\n                            name: row,\n                            shares: shares,\n                            equity: equity,\n                            totalReturn: totalReturn,\n                            currentRowPrice: currentRowPrice,\n                            history: []\n                        }\n                        result.push(\n                            <Row className={classes.tableRightBorder} key={data.name} row={data} history={history[row]}>\n\n                            </Row>\n                        )\n                        // result.push(<StyledTableRow>\n                        //     <StyledTableCell className={classes.tableRightBorder} component=\"th\" scope=\"row\" align=\"center\">\n                        //         {row}\n                        //     </StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{shares}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{equity}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{totalReturn}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{currentRowPrice}</StyledTableCell>\n                        // </StyledTableRow>)\n                        return result\n                    }, [])}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\nexport default StockDisplay;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx",["68","69","70","71","72"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx",["73","74"],"import React, { useState, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst WithdrawalForm = (props) => {\n    const classes = useStyles();\n    const [deposit, setDeposit] = useState('');\n    const newDeposit = useContext(DepositContext).handleDepositChange\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\n    const handleDepositChange = e => setDeposit(e.target.value);\n\n    const handleSubmit = async e => {\n        e.preventDefault()\n        const data = {\n            \"amount\": -deposit,\n            \"date\": Date.now()\n        }\n        setDeposit('');\n        newDeposit(data);\n        newBuyPower(data);     \n    }\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormControl>\n                <InputLabel> Amount</InputLabel>\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\n            </FormControl>\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                Submit\n            </Button>\n        </form>\n    );\n}\nexport default WithdrawalForm;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx",["75","76","77"],"import React, { useState, useEffect, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst DepositForm = (props) => {\n    const classes = useStyles();\n    const [deposit, setDeposit] = useState('');\n    const newDeposit = useContext(DepositContext).handleDepositChange\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\n    const handleDepositChange = e => setDeposit(e.target.value);\n    const handleSubmit = async e => {\n        e.preventDefault()\n        const data = {\n            \"amount\": deposit,\n            \"date\": Date.now()\n        }\n        setDeposit('')\n        newDeposit(data)\n        newBuyPower(data)\n    }\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormControl>\n                <InputLabel> Amount</InputLabel>\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\n            </FormControl>\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                Submit\n            </Button>\n        </form>\n    );\n}\nexport default DepositForm","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx",["78","79"],"import React, { useState, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport axios from 'axios';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst SellInputForm = (props) => {\n    const classes = useStyles();\n    const [stockName, setStockName] = useState('');\n    const [shares, setShares] = useState('');\n    const [price, setPrice] = useState('');\n    const handleStockNameChange = e => setStockName(e.target.value);\n    const handleSharesChange = e => setShares(e.target.value);\n    const handlePriceChange = e => setPrice(e.target.value);\n    const modify = useContext(TransactionContext).handleModifyingStock;\n    const newHistory = useContext(TransactionContext).handleModifyingHistory;\n    const buyPower = useContext(DepositContext).buyPower;\n    const newBuyPower = useContext(DepositContext).handleBuyAndSell;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n    const handleSubmit = async e => {\n        e.preventDefault()\n        const data = {\n            \"Stock Name\": stockName,\n            \"Shares\": shares,\n            \"Price\": updatedPrice[stockName],\n            \"Total\": parseFloat(shares) * parseFloat(updatedPrice[stockName])\n        };\n        const history = {\n            \"stock\": stockName.toUpperCase(),\n            \"shares\": shares,\n            \"price\": updatedPrice[stockName],\n            \"total\": -(parseFloat(shares) * parseFloat(updatedPrice[stockName])),\n            \"date\": new Date().toLocaleDateString()\n        }\n        axios.post(`${process.env.REACT_APP_BACKEND_URL}sellTransaction`, data)\n            .then((res) => {\n                setStockName('');\n                setPrice('');\n                setShares('');\n                modify(res.data.data)\n            });\n        await axios.post(`${process.env.REACT_APP_BACKEND_URL}tradeHistory`, history);\n\n        await newHistory(history);\n        newBuyPower({\n            \"amount\": parseFloat(buyPower) + (parseFloat(shares) * parseFloat(updatedPrice[stockName])),\n            \"date\": Date.now()\n        })\n    }\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormControl>\n                <InputLabel> Stock Name</InputLabel>\n                <Input id=\"outlined-basic\" onChange={handleStockNameChange} value={stockName} />\n            </FormControl>\n            <FormControl>\n                <InputLabel> Shares</InputLabel>\n                <Input id=\"outlined-basic\" onChange={handleSharesChange} value={shares} />\n            </FormControl>\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                Submit\n            </Button>\n        </form>\n    );\n}\nexport default SellInputForm","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx",["80","81","82"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx",["83","84","85"],"import React, { useEffect, useState } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer, Tooltip } from 'recharts';\nimport Title from './Title';\nimport axios from 'axios';\nimport { create } from 'lodash';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\nexport default function Chart(props) {\n  const theme = useTheme();\n  const [chartData, setChartData] = useState([]);\n\n\n  useEffect(() => {\n    const data = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}allInvesting`);\n      const list = response.data.reduce((result, row) => {\n        const obj = createData(row[\"time\"], row[\"amount\"]);\n        result.push(obj);\n        return result;\n      }, []);\n      setChartData(list);\n    }\n    data();\n  }, [])\n\n  useEffect(() => {\n    \n    if (props.chartData !== undefined) {\n      \n      setChartData(chartData => {\n        const receive = props.chartData;\n        const data = createData(receive[\"time\"], receive[\"amount\"]);\n        chartData.push(data);\n        return chartData\n      })\n      console.log(chartData.length);\n    }\n  }, [props.chartData])\n  return (\n    <React.Fragment>\n      <Title align=\"center\">Today</Title>\n      <ResponsiveContainer >\n        <LineChart\n          data={chartData.slice()}\n          margin={{\n            top: 16,\n            right: 0,\n            bottom: 0,\n            left: 0,\n          }}\n        >\n          <XAxis padding={{ left: 0 }} dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis padding={{ left: 0 }} hide={true} stroke={theme.palette.text.secondary} domain={['dataMin', 'dataMax']}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Investing ($)\n            </Label>\n          </YAxis>\n          <Tooltip></Tooltip>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":20},{"ruleId":"90","severity":1,"message":"94","line":12,"column":10,"nodeType":"92","messageId":"93","endLine":12,"endColumn":15},{"ruleId":"90","severity":1,"message":"95","line":65,"column":7,"nodeType":"92","messageId":"93","endLine":65,"endColumn":17},{"ruleId":"96","severity":1,"message":"97","line":260,"column":8,"nodeType":"98","endLine":260,"endColumn":29,"suggestions":"99"},{"ruleId":"90","severity":1,"message":"100","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"101","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"102","line":18,"column":8,"nodeType":"92","messageId":"93","endLine":18,"endColumn":13},{"ruleId":"90","severity":1,"message":"103","line":32,"column":7,"nodeType":"92","messageId":"93","endLine":32,"endColumn":21},{"ruleId":"90","severity":1,"message":"104","line":42,"column":10,"nodeType":"92","messageId":"93","endLine":42,"endColumn":27},{"ruleId":"90","severity":1,"message":"100","line":2,"column":40,"nodeType":"92","messageId":"93","endLine":2,"endColumn":48},{"ruleId":"90","severity":1,"message":"91","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":20},{"ruleId":"90","severity":1,"message":"105","line":50,"column":11,"nodeType":"92","messageId":"93","endLine":50,"endColumn":23},{"ruleId":"96","severity":1,"message":"106","line":55,"column":8,"nodeType":"98","endLine":55,"endColumn":22,"suggestions":"107"},{"ruleId":"96","severity":1,"message":"108","line":82,"column":8,"nodeType":"98","endLine":82,"endColumn":10,"suggestions":"109"},{"ruleId":"90","severity":1,"message":"110","line":8,"column":10,"nodeType":"92","messageId":"93","endLine":8,"endColumn":28},{"ruleId":"90","severity":1,"message":"111","line":8,"column":30,"nodeType":"92","messageId":"93","endLine":8,"endColumn":47},{"ruleId":"90","severity":1,"message":"101","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"110","line":8,"column":10,"nodeType":"92","messageId":"93","endLine":8,"endColumn":28},{"ruleId":"90","severity":1,"message":"111","line":8,"column":30,"nodeType":"92","messageId":"93","endLine":8,"endColumn":47},{"ruleId":"90","severity":1,"message":"112","line":25,"column":12,"nodeType":"92","messageId":"93","endLine":25,"endColumn":17},{"ruleId":"90","severity":1,"message":"113","line":28,"column":11,"nodeType":"92","messageId":"93","endLine":28,"endColumn":28},{"ruleId":"90","severity":1,"message":"112","line":26,"column":12,"nodeType":"92","messageId":"93","endLine":26,"endColumn":17},{"ruleId":"90","severity":1,"message":"113","line":32,"column":11,"nodeType":"92","messageId":"93","endLine":32,"endColumn":28},{"ruleId":"96","severity":1,"message":"114","line":87,"column":8,"nodeType":"98","endLine":87,"endColumn":16,"suggestions":"115"},{"ruleId":"90","severity":1,"message":"116","line":6,"column":10,"nodeType":"92","messageId":"93","endLine":6,"endColumn":16},{"ruleId":"96","severity":1,"message":"117","line":43,"column":6,"nodeType":"98","endLine":43,"endColumn":23,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":68,"column":86,"nodeType":"121","endLine":68,"endColumn":102},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useIsMount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deposit'. Either include it or remove the dependency array. Mutable values like 'prevDeposit.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["124"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'StyledTableRow' is assigned a value but never used.","'createTransaction' is defined but never used.","'getRandomInt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'buyPower', 'totalReturn', and 'totalStockInitial'. Either include them or remove the dependency array.",["125"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["126"],"'TransactionContext' is defined but never used.","'StockPriceContext' is defined but never used.","'price' is assigned a value but never used.","'handlePriceChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'buyPower', 'stockName', and 'updatedPrice'. Either include them or remove the dependency array.",["127"],"'create' is defined but never used.","React Hook useEffect has a missing dependency: 'chartData.length'. Either include it or remove the dependency array.",["128"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [deposit]",{"range":"139","text":"140"},"Update the dependencies array to be: [buyPower, totalReturn, totalStockInitial, updatedPrice]",{"range":"141","text":"142"},"Update the dependencies array to be: [props]",{"range":"143","text":"144"},"Update the dependencies array to be: [buyPower, shares, stockName, updatedPrice]",{"range":"145","text":"146"},"Update the dependencies array to be: [chartData.length, props.chartData]",{"range":"147","text":"148"},[8786,8807],"[deposit]",[2291,2305],"[buyPower, totalReturn, totalStockInitial, updatedPrice]",[3282,3284],"[props]",[3520,3528],"[buyPower, shares, stockName, updatedPrice]",[1206,1223],"[chartData.length, props.chartData]"]