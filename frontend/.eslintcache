[{"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js":"1","/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js":"2","/Users/hieun/github/StockMarketSimulator/frontend/src/App.js":"3","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx":"4","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx":"5","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx":"6","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx":"7","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx":"8","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx":"9","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx":"10","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx":"11","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx":"12","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/ResetButton.jsx":"13"},{"size":502,"mtime":1682561727247,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1682561727247,"results":"16","hashOfConfig":"15"},{"size":244,"mtime":1682561727245,"results":"17","hashOfConfig":"15"},{"size":12804,"mtime":1682835177842,"results":"18","hashOfConfig":"15"},{"size":9935,"mtime":1682561727246,"results":"19","hashOfConfig":"15"},{"size":4619,"mtime":1682832089959,"results":"20","hashOfConfig":"15"},{"size":2481,"mtime":1682824578451,"results":"21","hashOfConfig":"15"},{"size":2021,"mtime":1682813166562,"results":"22","hashOfConfig":"15"},{"size":4777,"mtime":1682834544080,"results":"23","hashOfConfig":"15"},{"size":5209,"mtime":1682835040671,"results":"24","hashOfConfig":"15"},{"size":2164,"mtime":1682824573923,"results":"25","hashOfConfig":"15"},{"size":362,"mtime":1682561727246,"results":"26","hashOfConfig":"15"},{"size":1016,"mtime":1682732488127,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1rzx0sv",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js",[],["57","58"],"/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/App.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx",["59","60","61","62"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx",["63","64","65","66","67"],"import React, { useState, useEffect, useContext } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TransactionContext, StockPriceContext } from './Layout';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.common.black,\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\n\n\nfunction createTransaction(shares, price, total, current) {\n    return { shares, price, total, current };\n}\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: \"50%\"\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst Row = (props) => {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell className={classes.tableRightBorder}>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                    {row.name}\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.shares}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.equity}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.totalReturn}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.currentRowPrice}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                History\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Date</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Shares</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Price</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Total</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        !!props.history ? (props.history).map((stock) => {\n                                            return <TableRow key={stock[\"_id\"]}>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                                                    {stock[\"date\"]}\n                                                </TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"shares\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"price\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">\n                                                    {stock[\"total\"]}\n                                                </TableCell>\n                                            </TableRow>\n                                        }\n                                        ) : null\n                                    }\n\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        shares: PropTypes.number.isRequired,\n        equity: PropTypes.number,\n\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                total: PropTypes.number,\n                shares: PropTypes.string,\n                date: PropTypes.string,\n            }),\n        ),\n        totalReturn: PropTypes.number,\n        currentPrice: PropTypes.number,\n    }),\n};\nconst StockDisplay = (props) => {\n    const classes = useStyles();\n    const transactions = useContext(TransactionContext).transaction;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n    const history = useContext(TransactionContext).history;\n\n    return (\n        <TableContainer border={1} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\"></StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Stock Name</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Shares</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Equity</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Total Return</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Current Price</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(transactions).reduce((result, row) => {\n                        let currentRowPrice = updatedPrice[row] === undefined ? '0' : updatedPrice[row].toString()\n                        let shares = '0';\n                        let equity = '0';\n                        let totalReturn = '0'\n                        shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\n                        if (shares !== undefined && currentRowPrice !== undefined) {\n                            equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\n                        }\n                        totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\n                        let data = {\n                            name: row,\n                            shares: shares,\n                            equity: equity,\n                            totalReturn: totalReturn,\n                            currentRowPrice: currentRowPrice,\n                            history: []\n                        }\n                        result.push(\n                            <Row className={classes.tableRightBorder} key={data.name} row={data} history={history[row]}>\n\n                            </Row>\n                        )\n                        // result.push(<StyledTableRow>\n                        //     <StyledTableCell className={classes.tableRightBorder} component=\"th\" scope=\"row\" align=\"center\">\n                        //         {row}\n                        //     </StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{shares}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{equity}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{totalReturn}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{currentRowPrice}</StyledTableCell>\n                        // </StyledTableRow>)\n                        return result\n                    }, [])}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\nexport default StockDisplay;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx",["68","69","70","71"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx",["72","73"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx",["74","75"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx",["76","77","78","79"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx",["80","81","82"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx",["83","84"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/ResetButton.jsx",["85","86","87"],"import Button from '@material-ui/core/Button';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { StockPriceContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst ResetButton = () => {\n    const classes = useStyles();\n    const resetPage = useContext(StockPriceContext).handleResetPage;\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        await resetPage()\n    }\n\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Button type='submit' variant=\"contained\" color=\"primary\" >\n                    Reset Portfolio\n                </Button>\n            </form>\n        </React.Fragment>\n    );\n}\n\n\nexport default ResetButton",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":20},{"ruleId":"92","severity":1,"message":"96","line":12,"column":10,"nodeType":"94","messageId":"95","endLine":12,"endColumn":15},{"ruleId":"92","severity":1,"message":"97","line":67,"column":7,"nodeType":"94","messageId":"95","endLine":67,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":269,"column":8,"nodeType":"100","endLine":269,"endColumn":29,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"103","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"104","line":18,"column":8,"nodeType":"94","messageId":"95","endLine":18,"endColumn":13},{"ruleId":"92","severity":1,"message":"105","line":32,"column":7,"nodeType":"94","messageId":"95","endLine":32,"endColumn":21},{"ruleId":"92","severity":1,"message":"106","line":42,"column":10,"nodeType":"94","messageId":"95","endLine":42,"endColumn":27},{"ruleId":"92","severity":1,"message":"102","line":2,"column":40,"nodeType":"94","messageId":"95","endLine":2,"endColumn":48},{"ruleId":"92","severity":1,"message":"93","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":20},{"ruleId":"98","severity":1,"message":"107","line":52,"column":8,"nodeType":"100","endLine":52,"endColumn":55,"suggestions":"108"},{"ruleId":"98","severity":1,"message":"109","line":77,"column":8,"nodeType":"100","endLine":77,"endColumn":10,"suggestions":"110"},{"ruleId":"92","severity":1,"message":"111","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":28},{"ruleId":"92","severity":1,"message":"112","line":8,"column":30,"nodeType":"94","messageId":"95","endLine":8,"endColumn":47},{"ruleId":"92","severity":1,"message":"111","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":28},{"ruleId":"92","severity":1,"message":"112","line":8,"column":30,"nodeType":"94","messageId":"95","endLine":8,"endColumn":47},{"ruleId":"92","severity":1,"message":"113","line":26,"column":12,"nodeType":"94","messageId":"95","endLine":26,"endColumn":17},{"ruleId":"92","severity":1,"message":"114","line":33,"column":11,"nodeType":"94","messageId":"95","endLine":33,"endColumn":28},{"ruleId":"98","severity":1,"message":"115","line":90,"column":8,"nodeType":"100","endLine":90,"endColumn":16,"suggestions":"116"},{"ruleId":"98","severity":1,"message":"117","line":99,"column":8,"nodeType":"100","endLine":99,"endColumn":19,"suggestions":"118"},{"ruleId":"92","severity":1,"message":"113","line":26,"column":12,"nodeType":"94","messageId":"95","endLine":26,"endColumn":17},{"ruleId":"92","severity":1,"message":"114","line":34,"column":11,"nodeType":"94","messageId":"95","endLine":34,"endColumn":28},{"ruleId":"98","severity":1,"message":"119","line":98,"column":8,"nodeType":"100","endLine":98,"endColumn":16,"suggestions":"120"},{"ruleId":"92","severity":1,"message":"121","line":6,"column":10,"nodeType":"94","messageId":"95","endLine":6,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":67,"column":86,"nodeType":"124","endLine":67,"endColumn":102},{"ruleId":"92","severity":1,"message":"102","line":2,"column":17,"nodeType":"94","messageId":"95","endLine":2,"endColumn":25},{"ruleId":"92","severity":1,"message":"103","line":2,"column":27,"nodeType":"94","messageId":"95","endLine":2,"endColumn":36},{"ruleId":"92","severity":1,"message":"104","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":13},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useIsMount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deposit'. Either include it or remove the dependency array. Mutable values like 'prevDeposit.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["127"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'StyledTableRow' is assigned a value but never used.","'createTransaction' is defined but never used.","React Hook useEffect has missing dependencies: 'totalReturn' and 'totalStockInitial'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["129"],"'TransactionContext' is defined but never used.","'StockPriceContext' is defined but never used.","'price' is assigned a value but never used.","'handlePriceChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'globalTransaction' and 'stockName'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'globalTransaction'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'buyPower', 'stockName', and 'updatedPrice'. Either include them or remove the dependency array.",["132"],"'create' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [deposit]",{"range":"145","text":"146"},"Update the dependencies array to be: [updatedPrice, transactions, buyPower, deposit, totalStockInitial, totalReturn]",{"range":"147","text":"148"},"Update the dependencies array to be: [props]",{"range":"149","text":"150"},"Update the dependencies array to be: [globalTransaction, shares, stockName]",{"range":"151","text":"152"},"Update the dependencies array to be: [globalTransaction, stockName]",{"range":"153","text":"154"},"Update the dependencies array to be: [buyPower, shares, stockName, updatedPrice]",{"range":"155","text":"156"},[9009,9030],"[deposit]",[2189,2236],"[updatedPrice, transactions, buyPower, deposit, totalStockInitial, totalReturn]",[3084,3086],"[props]",[3493,3501],"[globalTransaction, shares, stockName]",[3778,3789],"[globalTransaction, stockName]",[3904,3912],"[buyPower, shares, stockName, updatedPrice]"]