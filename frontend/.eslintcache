[{"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js":"1","/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js":"2","/Users/hieun/github/StockMarketSimulator/frontend/src/App.js":"3","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx":"4","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx":"5","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx":"6","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx":"7","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx":"8","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx":"9","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx":"10","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx":"11","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx":"12","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/ResetButton.jsx":"13"},{"size":502,"mtime":1682561727247,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1682561727247,"results":"16","hashOfConfig":"15"},{"size":244,"mtime":1682561727245,"results":"17","hashOfConfig":"15"},{"size":12303,"mtime":1682806861060,"results":"18","hashOfConfig":"15"},{"size":9935,"mtime":1682561727246,"results":"19","hashOfConfig":"15"},{"size":4689,"mtime":1682807088626,"results":"20","hashOfConfig":"15"},{"size":1630,"mtime":1682806861061,"results":"21","hashOfConfig":"15"},{"size":1623,"mtime":1682806861059,"results":"22","hashOfConfig":"15"},{"size":3169,"mtime":1682806861060,"results":"23","hashOfConfig":"15"},{"size":4415,"mtime":1682806861058,"results":"24","hashOfConfig":"15"},{"size":2201,"mtime":1682806861059,"results":"25","hashOfConfig":"15"},{"size":362,"mtime":1682561727246,"results":"26","hashOfConfig":"15"},{"size":1016,"mtime":1682732488127,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1rzx0sv",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"30"},"/Users/hieun/github/StockMarketSimulator/frontend/src/index.js",[],["62","63"],"/Users/hieun/github/StockMarketSimulator/frontend/src/reportWebVitals.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/App.js",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Layout.jsx",["64","65","66","67"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/StockDisplay.jsx",["68","69","70","71","72"],"import React, { useState, useEffect, useContext } from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { TransactionContext, StockPriceContext } from './Layout';\nimport PropTypes from 'prop-types';\nimport IconButton from '@material-ui/core/IconButton';\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\nimport Collapse from '@material-ui/core/Collapse';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.common.black,\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\n\n\nfunction createTransaction(shares, price, total, current) {\n    return { shares, price, total, current };\n}\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: \"50%\"\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst useRowStyles = makeStyles({\n    root: {\n        '& > *': {\n            borderBottom: 'unset',\n        },\n    },\n    tableRightBorder: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderStyle: 'solid',\n    },\n});\nconst Row = (props) => {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useRowStyles();\n\n    return (\n        <React.Fragment>\n            <TableRow className={classes.root}>\n                <TableCell className={classes.tableRightBorder}>\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                    {row.name}\n                </TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.shares}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.equity}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.totalReturn}</TableCell>\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.currentRowPrice}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box margin={1}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                History\n                            </Typography>\n                            <Table size=\"small\" aria-label=\"purchases\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Date</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Shares</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Price</TableCell>\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Total</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {\n                                        !!props.history ? (props.history).map((stock) => {\n                                            return <TableRow key={stock[\"_id\"]}>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\n                                                    {stock[\"date\"]}\n                                                </TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"shares\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"price\"]}</TableCell>\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">\n                                                    {stock[\"total\"]}\n                                                </TableCell>\n                                            </TableRow>\n                                        }\n                                        ) : null\n                                    }\n\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        shares: PropTypes.number.isRequired,\n        equity: PropTypes.number,\n\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                total: PropTypes.number,\n                shares: PropTypes.string,\n                date: PropTypes.string,\n            }),\n        ),\n        totalReturn: PropTypes.number,\n        currentPrice: PropTypes.number,\n    }),\n};\nconst StockDisplay = (props) => {\n    const classes = useStyles();\n    const transactions = useContext(TransactionContext).transaction;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n    const history = useContext(TransactionContext).history;\n\n    return (\n        <TableContainer border={1} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\"></StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Stock Name</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Shares</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Equity</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Total Return</StyledTableCell>\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Current Price</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {Object.keys(transactions).reduce((result, row) => {\n                        let currentRowPrice = updatedPrice[row] === undefined ? '0' : updatedPrice[row].toString()\n                        let shares = '0';\n                        let equity = '0';\n                        let totalReturn = '0'\n                        shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\n                        if (shares !== undefined && currentRowPrice !== undefined) {\n                            equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\n                        }\n                        totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\n                        let data = {\n                            name: row,\n                            shares: shares,\n                            equity: equity,\n                            totalReturn: totalReturn,\n                            currentRowPrice: currentRowPrice,\n                            history: []\n                        }\n                        result.push(\n                            <Row className={classes.tableRightBorder} key={data.name} row={data} history={history[row]}>\n\n                            </Row>\n                        )\n                        // result.push(<StyledTableRow>\n                        //     <StyledTableCell className={classes.tableRightBorder} component=\"th\" scope=\"row\" align=\"center\">\n                        //         {row}\n                        //     </StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{shares}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{equity}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{totalReturn}</StyledTableCell>\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{currentRowPrice}</StyledTableCell>\n                        // </StyledTableRow>)\n                        return result\n                    }, [])}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\nexport default StockDisplay;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Investing.jsx",["73","74","75","76","77"],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/WithdrawalForm.jsx",["78","79"],"import React, { useState, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst WithdrawalForm = (props) => {\n    const classes = useStyles();\n    const [deposit, setDeposit] = useState('');\n    const [invalidQuantity, setInvalidQuantity] = useState(false)\n    const [notEnoughWithdrawal, setNotEnoughWithdrawal] = useState(false)\n    const newDeposit = useContext(DepositContext).handleDepositChange\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\n\n    const checkInputQuantity = value => {\n        if (value < 0) {\n            setInvalidQuantity(true);\n            return true;\n        }\n        else {\n            setInvalidQuantity(false);\n            return false;\n        }\n    }\n    \n    const checkEnoughWithdrawal = value => {\n        console.log(localStorage.getItem('investing'))\n        if (parseFloat(localStorage.getItem('investing')) < parseFloat(value)) {\n            setNotEnoughWithdrawal(true);\n            return true;\n        }\n        else {\n            setNotEnoughWithdrawal(false);\n            return false;\n        }\n    }\n\n    const handleDepositChange = e => {\n        const value = e.target.value;\n        console.log(value)\n        checkInputQuantity(value)\n        checkEnoughWithdrawal(value)\n        setDeposit(value);\n    }\n\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        if (deposit !== '' && !invalidQuantity && !notEnoughWithdrawal) {\n            const data = {\n                \"amount\": -deposit,\n                \"date\": Date.now()\n            }\n            newDeposit(data);\n            newBuyPower(data);\n        }\n        setDeposit('');\n    }\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormControl>\n                <InputLabel> Amount</InputLabel>\n                <Input type=\"number\" id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} error={invalidQuantity && notEnoughWithdrawal} />\n            </FormControl>\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                Submit\n            </Button>\n            {invalidQuantity && <Alert severity=\"error\">Invalid Quantity</Alert>}\n            {notEnoughWithdrawal && <Alert severity=\"error\">Not Enough Money</Alert>}\n        </form>\n    );\n}\nexport default WithdrawalForm;","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/DepositForm.jsx",["80","81","82"],"import React, { useState, useEffect, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\nconst DepositForm = (props) => {\n    const classes = useStyles();\n    const [deposit, setDeposit] = useState('');\n    const [invalidQuantity, setInvalidQuantity] = useState(false)\n    const newDeposit = useContext(DepositContext).handleDepositChange\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\n    const handleDepositChange = e => {\n        const value = e.target.value;\n        console.log(value)\n        if (value < 0) {\n            setInvalidQuantity(true);\n        }\n        if (value >= 0) {\n            setInvalidQuantity(false);\n        }\n\n        setDeposit(e.target.value);\n    }\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        if (deposit !== '' && !invalidQuantity) {\n            const data = {\n                \"amount\": deposit,\n                \"date\": Date.now()\n            }\n            setDeposit('')\n            newDeposit(data)\n            newBuyPower(data)\n        }\n    }\n    return (\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n            <FormControl>\n                <InputLabel> Amount</InputLabel>\n                <Input type=\"number\" id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} error={invalidQuantity} />\n            </FormControl>\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                Submit\n            </Button>\n            {invalidQuantity && <Alert severity=\"error\">Invalid Quantity</Alert>}\n        </form>\n        \n    );\n}\nexport default DepositForm","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/SellInputForm.jsx",["83","84"],"import React, { useState, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport axios from 'axios';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst SellInputForm = (props) => {\n    const classes = useStyles();\n    const [stockName, setStockName] = useState('');\n    const [shares, setShares] = useState('');\n    const [price, setPrice] = useState('');\n    const [invalidQuantity, setInvalidQuantity] = useState(false)\n    const handleStockNameChange = e => setStockName(e.target.value);\n    const handleSharesChange = e => {\n        const value = e.target.value;\n        if (value < 0) {\n            setInvalidQuantity(true);\n        }\n        if (value >= 0) {\n            setInvalidQuantity(false);\n        }\n\n        setShares(e.target.value);\n    }\n    const handlePriceChange = e => setPrice(e.target.value);\n    const modify = useContext(TransactionContext).handleModifyingStock;\n    const newHistory = useContext(TransactionContext).handleModifyingHistory;\n    const buyPower = useContext(DepositContext).buyPower;\n    const newBuyPower = useContext(DepositContext).handleBuyAndSell;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        if (stockName !== '' && shares !== '' && !invalidQuantity) {\n            const data = {\n                \"Stock Name\": stockName,\n                \"Shares\": shares,\n                \"Price\": updatedPrice[stockName],\n                \"Total\": parseFloat(shares) * parseFloat(updatedPrice[stockName])\n            };\n            const history = {\n                \"stock\": stockName.toUpperCase(),\n                \"shares\": shares,\n                \"price\": updatedPrice[stockName],\n                \"total\": -(parseFloat(shares) * parseFloat(updatedPrice[stockName])),\n                \"date\": new Date().toLocaleDateString()\n            }\n            axios.post(`${process.env.REACT_APP_BACKEND_URL}sellTransaction`, data)\n                .then((res) => {\n                    setStockName('');\n                    setPrice('');\n                    setShares('');\n                    modify(res.data.data)\n                });\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}tradeHistory`, history);\n\n            await newHistory(history);\n            newBuyPower({\n                \"amount\": parseFloat(buyPower) + (parseFloat(shares) * parseFloat(updatedPrice[stockName])),\n                \"date\": Date.now()\n            })\n        }\n    }\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <FormControl>\n                    <InputLabel> Stock Name</InputLabel>\n                    <Input id=\"outlined-basic\" onChange={handleStockNameChange} value={stockName} />\n                </FormControl>\n                <FormControl>\n                    <InputLabel> Shares</InputLabel>\n                    <Input type=\"number\" id=\"outlined-basic\" onChange={handleSharesChange} value={shares} error={invalidQuantity} />\n                </FormControl>\n                <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\n                    Submit\n                </Button>\n            </form>\n            {invalidQuantity && <Alert severity=\"error\">Invalid Quantity</Alert>}\n        </React.Fragment>\n    );\n}\nexport default SellInputForm","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/BuyInputForm.jsx",["85","86","87"],"import React, { useState, useEffect, useContext } from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Alert from '@material-ui/lab/Alert';\nimport axios from 'axios';\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst BuyInputForm = (props) => {\n    const classes = useStyles();\n    const [stockName, setStockName] = useState('');\n    const [shares, setShares] = useState('');\n    const [price, setPrice] = useState('');\n    const [enoughMoney, setEnoughMoney] = useState(true)\n    const modify = useContext(TransactionContext).handleModifyingStock;\n    const newHistory = useContext(TransactionContext).handleModifyingHistory;\n    const handleStockNameChange = e => setStockName(e.target.value);\n    const handleSharesChange = e => setShares(e.target.value);\n    const handlePriceChange = e => setPrice(e.target.value);\n    const buyPower = useContext(DepositContext).buyPower;\n    const newBuyPower = useContext(DepositContext).handleBuyAndSell;\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\n\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        const API_KEY = process.env.REACT_APP_API_KEY;\n        const response = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${stockName.toUpperCase()}&token=${API_KEY}`);\n        const cPrice = (response.data)[\"c\"].toString();\n        if (parseFloat(shares) * parseFloat(cPrice) > buyPower) {\n            setEnoughMoney(false);\n        }\n        else {\n            const data = {\n                \"Stock Name\": stockName.toUpperCase(),\n                \"Shares\": shares,\n                \"Price\": cPrice,\n                \"Total\": parseFloat(shares) * parseFloat(cPrice)\n            };\n\n            const history = {\n                \"stock\": stockName.toUpperCase(),\n                \"shares\": shares,\n                \"price\": cPrice,\n                \"total\": parseFloat(shares) * parseFloat(cPrice),\n                \"date\": new Date().toLocaleDateString()\n            }\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}addTransaction`, data)\n                .then((res) => {\n                    setStockName('');\n                    setPrice('');\n                    setShares('');\n                    console.log(res.data.data)\n                    res.data.data[\"Price\"] = parseFloat(res.data.data[\"Price\"]).toFixed(3).toString();\n                    res.data.data[\"Shares\"] = parseFloat(res.data.data[\"Shares\"]).toFixed(3).toString();\n                    modify(res.data.data, true)\n                });\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}tradeHistory`, history);\n            \n            await newHistory(history);\n            await newBuyPower({\n                \"amount\": parseFloat(buyPower) - (parseFloat(shares) * parseFloat(cPrice)),\n                \"date\": Date.now()\n            });\n        }\n    }\n    useEffect(() => {\n        if (parseFloat(shares) * parseFloat(updatedPrice[stockName]) > buyPower) {\n            setEnoughMoney(false);\n        }\n        else {\n            setEnoughMoney(true);\n        }\n    }, [shares])\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <FormControl>\n                    <InputLabel> Stock Name</InputLabel>\n                    <Input id=\"outlined-basic\" onChange={handleStockNameChange} value={stockName} />\n                </FormControl>\n                <FormControl>\n                    <InputLabel> Shares</InputLabel>\n                    <Input id=\"outlined-basic\" onChange={handleSharesChange} value={shares} />\n                </FormControl>\n                <Button type='submit' variant=\"contained\" color=\"primary\" error={!enoughMoney}>\n                    Submit\n                </Button>\n            </form>\n            {!enoughMoney && <Alert severity=\"error\">Buying Power is not enough</Alert>}\n        </React.Fragment>\n\n    );\n}\nexport default BuyInputForm","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Chart.jsx",["88","89"],"import React, { useEffect, useState } from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer, Tooltip } from 'recharts';\nimport Title from './Title';\nimport axios from 'axios';\nimport { create } from 'lodash';\n\n// Generate Sales Data\nfunction createData(time, amount) {\n  return { time, amount };\n}\n\nexport default function Chart(props) {\n  const theme = useTheme();\n  const [chartData, setChartData] = useState([]);\n\n\n  useEffect(() => {\n    const data = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}allInvesting`);\n      const list = response.data.reduce((result, row) => {\n        const obj = createData(row[\"time\"], row[\"amount\"]);\n        result.push(obj);\n        return result;\n      }, []);\n      setChartData(list);\n    }\n    data();\n  }, [])\n\n  useEffect(() => {\n    if (props.chartData !== undefined) {\n      setChartData(chartData => {\n        const receive = props.chartData;\n        const data = createData(receive[\"time\"], receive[\"amount\"]);\n        chartData.push(data);\n        return chartData\n      })\n    }\n  }, [props.chartData])\n  \n  return (\n    <React.Fragment>\n      <Title align=\"center\">Today</Title>\n      <ResponsiveContainer >\n        <LineChart\n          data={chartData.slice()}\n          margin={{\n            top: 16,\n            right: 0,\n            bottom: 0,\n            left: 0,\n          }}\n        >\n          <XAxis padding={{ left: 0 }} dataKey=\"time\" stroke={theme.palette.text.secondary} />\n          <YAxis padding={{ left: 0 }} hide={true} stroke={theme.palette.text.secondary} domain={['dataMin', 'dataMax']}>\n            <Label\n              angle={270}\n              position=\"left\"\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\n            >\n              Investing ($)\n            </Label>\n          </YAxis>\n          <Tooltip></Tooltip>\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n}","/Users/hieun/github/StockMarketSimulator/frontend/src/Components/Title.jsx",[],"/Users/hieun/github/StockMarketSimulator/frontend/src/Components/ResetButton.jsx",["90","91","92"],"import Button from '@material-ui/core/Button';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { StockPriceContext } from './Layout'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n}));\n\n\nconst ResetButton = () => {\n    const classes = useStyles();\n    const resetPage = useContext(StockPriceContext).handleResetPage;\n    const handleSubmit = async e => {\n        e.preventDefault()\n        e.stopPropagation()\n        await resetPage()\n    }\n\n    return (\n        <React.Fragment>\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                <Button type='submit' variant=\"contained\" color=\"primary\" >\n                    Reset Portfolio\n                </Button>\n            </form>\n        </React.Fragment>\n    );\n}\n\n\nexport default ResetButton",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":5,"column":10,"nodeType":"99","messageId":"100","endLine":5,"endColumn":20},{"ruleId":"97","severity":1,"message":"101","line":12,"column":10,"nodeType":"99","messageId":"100","endLine":12,"endColumn":15},{"ruleId":"97","severity":1,"message":"102","line":65,"column":7,"nodeType":"99","messageId":"100","endLine":65,"endColumn":17},{"ruleId":"103","severity":1,"message":"104","line":260,"column":8,"nodeType":"105","endLine":260,"endColumn":29,"suggestions":"106"},{"ruleId":"97","severity":1,"message":"107","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"97","severity":1,"message":"108","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"109","line":18,"column":8,"nodeType":"99","messageId":"100","endLine":18,"endColumn":13},{"ruleId":"97","severity":1,"message":"110","line":32,"column":7,"nodeType":"99","messageId":"100","endLine":32,"endColumn":21},{"ruleId":"97","severity":1,"message":"111","line":42,"column":10,"nodeType":"99","messageId":"100","endLine":42,"endColumn":27},{"ruleId":"97","severity":1,"message":"107","line":2,"column":40,"nodeType":"99","messageId":"100","endLine":2,"endColumn":48},{"ruleId":"97","severity":1,"message":"98","line":4,"column":10,"nodeType":"99","messageId":"100","endLine":4,"endColumn":20},{"ruleId":"97","severity":1,"message":"112","line":50,"column":11,"nodeType":"99","messageId":"100","endLine":50,"endColumn":23},{"ruleId":"103","severity":1,"message":"113","line":55,"column":8,"nodeType":"105","endLine":55,"endColumn":22,"suggestions":"114"},{"ruleId":"103","severity":1,"message":"115","line":82,"column":8,"nodeType":"105","endLine":82,"endColumn":10,"suggestions":"116"},{"ruleId":"97","severity":1,"message":"117","line":8,"column":10,"nodeType":"99","messageId":"100","endLine":8,"endColumn":28},{"ruleId":"97","severity":1,"message":"118","line":8,"column":30,"nodeType":"99","messageId":"100","endLine":8,"endColumn":47},{"ruleId":"97","severity":1,"message":"108","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"117","line":8,"column":10,"nodeType":"99","messageId":"100","endLine":8,"endColumn":28},{"ruleId":"97","severity":1,"message":"118","line":8,"column":30,"nodeType":"99","messageId":"100","endLine":8,"endColumn":47},{"ruleId":"97","severity":1,"message":"119","line":26,"column":12,"nodeType":"99","messageId":"100","endLine":26,"endColumn":17},{"ruleId":"97","severity":1,"message":"120","line":40,"column":11,"nodeType":"99","messageId":"100","endLine":40,"endColumn":28},{"ruleId":"97","severity":1,"message":"108","line":1,"column":27,"nodeType":"99","messageId":"100","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"118","line":10,"column":30,"nodeType":"99","messageId":"100","endLine":10,"endColumn":47},{"ruleId":"97","severity":1,"message":"119","line":26,"column":12,"nodeType":"99","messageId":"100","endLine":26,"endColumn":17},{"ruleId":"97","severity":1,"message":"121","line":6,"column":10,"nodeType":"99","messageId":"100","endLine":6,"endColumn":16},{"ruleId":"122","severity":1,"message":"123","line":66,"column":86,"nodeType":"124","endLine":66,"endColumn":102},{"ruleId":"97","severity":1,"message":"107","line":2,"column":17,"nodeType":"99","messageId":"100","endLine":2,"endColumn":25},{"ruleId":"97","severity":1,"message":"108","line":2,"column":27,"nodeType":"99","messageId":"100","endLine":2,"endColumn":36},{"ruleId":"97","severity":1,"message":"109","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":13},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useIsMount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deposit'. Either include it or remove the dependency array. Mutable values like 'prevDeposit.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["127"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'StyledTableRow' is assigned a value but never used.","'createTransaction' is defined but never used.","'getRandomInt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'buyPower', 'totalReturn', and 'totalStockInitial'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["129"],"'TransactionContext' is defined but never used.","'StockPriceContext' is defined but never used.","'price' is assigned a value but never used.","'handlePriceChange' is assigned a value but never used.","'create' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [deposit]",{"range":"136","text":"137"},"Update the dependencies array to be: [buyPower, totalReturn, totalStockInitial, updatedPrice]",{"range":"138","text":"139"},"Update the dependencies array to be: [props]",{"range":"140","text":"141"},[8786,8807],"[deposit]",[2291,2305],"[buyPower, totalReturn, totalStockInitial, updatedPrice]",[3282,3284],"[props]"]